{
  "version": 3,
  "sources": ["../src/js/ImixsFormController.js", "../src/js/DataManager.js", "../src/js/ModelManager.js", "../src/js/FormManager.js", "../src/js/ErrorManager.js"],
  "sourcesContent": ["/**\n * The ImixsFormController is the main class that can be used to initialize a form in a Single Page Application\n */\nimport { DataManager } from \"./DataManager.js\";\nimport { ModelManager } from \"./ModelManager.js\";\nimport { FormManager } from \"./FormManager.js\";\nimport { ErrorManager } from \"./ErrorManager.js\";\n\nclass ImixsFormController {\n    constructor(containerId, config = {}) {\n        this.containerId = containerId;\n\n        document.addEventListener(\"DOMContentLoaded\", () => this.init(config));\n    }\n\n    async init(config) {\n        try {\n            // Initialize managers\n            this.errorManager = new ErrorManager();\n            this.dataManager = new DataManager(config);\n            this.modelManager = new ModelManager(this.dataManager);\n            this.formManager = new FormManager(this.dataManager);\n\n            // Setup event handlers\n            this._setupEventHandlers();\n\n            // Initialize and render form\n            await this._initializeForm();\n        } catch (error) {\n            this.errorManager.handleError(error);\n        }\n    }\n\n    _setupEventHandlers() {\n        document.addEventListener(\"formSubmitSuccess\", (e) => {\n            console.log(\"Form data:\", e.detail);\n            this.errorManager.showInfo(\"Form submitted successfully!\", {\n                timeout: 3000,\n            });\n        });\n\n        document.addEventListener(\"formSubmitError\", (e) => {\n            this.errorManager.handleError(e.detail.error);\n        });\n    }\n\n    async _initializeForm() {\n        // Initialize DataManager\n        await this.dataManager.initialize();\n\n        // Get form definition\n        const formDefinition = this.modelManager.getFormDefinition();\n        if (!formDefinition) {\n            throw new Error(\n                \"No form definition found in task or workitem data\"\n            );\n        }\n\n        // Get available events\n        const events = await this.modelManager.getTaskEvents();\n\n        // Generate and render form\n        const formStructure = await this.formManager.parseFormDefinition(\n            formDefinition\n        );\n        this.formManager.renderForm(formStructure, this.containerId, events);\n    }\n}\n\nexport { ImixsFormController };\n", "// DataManager.js\nexport class DataManager {\n    constructor(config = {}) {\n        // Parse URL parameters for common workflow parameters\n        const urlParams = new URLSearchParams(window.location.search);\n\n        // Initialize base configuration\n        this.config = {\n            baseUrl: config.baseUrl || \"/api\",\n            credentials: config.credentials || {},\n            workflowEndpoint: config.workflowEndpoint || \"workflow/workitem\",\n            mockMode: config.mockMode || false,\n        };\n\n        // Store workitem ID if present\n        this.workitemId = urlParams.get(\"workitem\");\n\n        // If no workitem ID, use direct parameters\n        if (!this.workitemId) {\n            this.config.modelversion =\n                urlParams.get(\"modelversion\") || config.modelversion || \"1.0.0\";\n            this.config.taskid =\n                urlParams.get(\"taskid\") || config.taskid || \"1000\";\n            this.config.eventid =\n                urlParams.get(\"eventid\") || config.eventid || \"10\";\n        }\n\n        // XML namespaces required for Imixs-Workflow\n        this.namespaces = {\n            xsi: \"http://www.w3.org/2001/XMLSchema-instance\",\n            xs: \"http://www.w3.org/2001/XMLSchema\",\n        };\n\n        // Initialize XML document holders\n        this.taskXML = null; // Current BPMN task definition\n        this.eventsXML = null; // Available events for current task\n        this.workitemXML = null; // Current workitem data (if exists)\n    }\n\n    /**\n     * Initializes the DataManager by loading necessary data\n     * @returns {Promise<void>}\n     */\n    async initialize() {\n        if (this.workitemId) {\n            // Load existing workitem\n            await this.loadWorkitem(this.workitemId);\n\n            // Extract modelversion and taskid from workitem\n            this.config.modelversion = this.getItemValue(\n                \"$modelversion\",\n                this.workitemXML\n            )?.value;\n            this.config.taskid = this.getItemValue(\n                \"$taskid\",\n                this.workitemXML\n            )?.value;\n        } else {\n            // Create empty workitem document for new processes\n            this.workitemXML = this.createDocument();\n        }\n\n        // Load task definition\n        await this.loadTaskDefinition();\n\n        // Load available events\n        await this.loadTaskEvents();\n    }\n\n    /**\n     * Loads the current task definition\n     * @returns {Promise<Document>} Task definition XML\n     */\n    async loadTaskDefinition() {\n        try {\n            const url = this.getApiUrl(\n                `model/${this.config.modelversion}/tasks/${this.config.taskid}?format=xml&items=name,dataobjects,workflow.abstract,documentation`\n            );\n            const response = await this.fetchData(url);\n            const xmlText = await response.text();\n\n            this.taskXML = this.parseXMLString(xmlText);\n            return this.taskXML;\n        } catch (error) {\n            console.error(\"Error loading task definition:\", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Loads available events for current task\n     * @returns {Promise<Document>} Events XML\n     */\n    async loadTaskEvents() {\n        try {\n            const url = this.getApiUrl(\n                `model/${this.config.modelversion}/tasks/${this.config.taskid}/events?format=xml&items=eventid,workflow.public,name`\n            );\n            const response = await this.fetchData(url);\n            const xmlText = await response.text();\n\n            this.eventsXML = this.parseXMLString(xmlText);\n            return this.eventsXML;\n        } catch (error) {\n            console.error(\"Error loading task events:\", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Loads a workitem by its uniqueid\n     * @param {string} uniqueId - The uniqueid of the workitem\n     * @returns {Promise<Document>} Workitem XML\n     */\n    async loadWorkitem(uniqueId) {\n        try {\n            const url = this.getApiUrl(`workflow/workitem/${uniqueId}`);\n            const response = await this.fetchData(url);\n            const xmlText = await response.text();\n\n            // Parse complete response\n            const fullXML = this.parseXMLString(xmlText);\n\n            // Extract first document element\n            const documentElement = fullXML.getElementsByTagName(\"document\")[0];\n\n            // Create new document with extracted element as root\n            const doc = this.createDocument();\n            const newDocumentElement = doc.documentElement;\n\n            // Copy attributes and content\n            for (let attr of documentElement.attributes) {\n                newDocumentElement.setAttribute(attr.name, attr.value);\n            }\n            newDocumentElement.innerHTML = documentElement.innerHTML;\n\n            this.workitemXML = doc;\n            return doc;\n        } catch (error) {\n            console.error(\"Error loading workitem:\", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Gets form definition from current task or workitem\n     * @returns {string|null} The form definition XML or null if not found\n     */\n    getFormDefinition() {\n        let formDefinition = null;\n\n        // First try to get form definition from task\n        if (this.taskXML) {\n            const dataObjects = this.getItemValue(\"dataobjects\", this.taskXML);\n            if (\n                dataObjects &&\n                dataObjects[0]?.value === \"Form\" &&\n                dataObjects[1]?.value\n            ) {\n                formDefinition = dataObjects[1].value;\n                console.debug(\"Found form definition in task\");\n\n                // If we have a workitem, save the form definition for later use\n                if (this.workitemXML) {\n                    this.setItemValue(\n                        \"txtworkfloweditorcustomform\",\n                        formDefinition,\n                        null,\n                        this.workitemXML\n                    );\n                    console.debug(\"Saved form definition to workitem\");\n                }\n            }\n        }\n\n        // If no task definition found, try workitem\n        if (!formDefinition && this.workitemXML) {\n            const savedForm = this.getItemValue(\n                \"txtworkfloweditorcustomform\",\n                this.workitemXML\n            );\n            if (savedForm?.value) {\n                formDefinition = savedForm.value;\n                console.debug(\"Found form definition in workitem\");\n            }\n        }\n\n        // If found, unescape the content\n        if (formDefinition) {\n            return formDefinition\n                .replace(/&lt;/g, \"<\")\n                .replace(/&gt;/g, \">\")\n                .replace(/&quot;/g, '\"')\n                .replace(/&amp;/g, \"&\");\n        }\n\n        return null;\n    }\n\n    /**\n     * Performs an HTTP request with proper headers\n     * @param {string} url - The URL to fetch from\n     * @param {Object} options - Additional fetch options\n     * @returns {Promise<Response>} The fetch response\n     */\n    async fetchData(url, options = {}) {\n        const headers = {\n            Accept: \"application/xml\",\n            ...(options.headers || {}),\n        };\n\n        // Add authorization if credentials are provided\n        if (this.config.credentials.username) {\n            headers.Authorization =\n                \"Basic \" +\n                btoa(\n                    `${this.config.credentials.username}:${this.config.credentials.password}`\n                );\n        }\n\n        const response = await fetch(url, {\n            ...options,\n            headers,\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        return response;\n    }\n\n    /**\n     * Gets the complete URL for a workflow API endpoint\n     * @param {string} path - The path to append to the base URL\n     * @returns {string} The complete URL\n     */\n    getApiUrl(path) {\n        return `${this.config.baseUrl}/${path}`;\n    }\n\n    /**\n     * Parses an XML string into an XML Document\n     * @param {string} xmlString - The XML string to parse\n     * @returns {Document} The parsed XML Document\n     */\n    parseXMLString(xmlString) {\n        const parser = new DOMParser();\n        return parser.parseFromString(xmlString, \"text/xml\");\n    }\n\n    /**\n     * Creates a new document element with required namespaces\n     * @returns {Document} The new XML document\n     */\n    createDocument() {\n        const xmlString =\n            '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n' +\n            '<document xmlns:xsi=\"' +\n            this.namespaces.xsi +\n            '\" ' +\n            'xmlns:xs=\"' +\n            this.namespaces.xs +\n            '\"/>';\n\n        const doc = new DOMParser().parseFromString(xmlString, \"text/xml\");\n        return doc;\n    }\n\n    /**\n     * Returns the value of an item\n     * @param {string} itemName - The name of the item\n     * @param {Element} [context] - Optional context (document node)\n     * @returns {Object} Value and type of the item\n     */\n    getItemValue(itemName, context = this.xmlDoc) {\n        const itemElement = context.querySelector(`item[name=\"${itemName}\"]`);\n        if (!itemElement) return null;\n\n        const values = Array.from(\n            itemElement.getElementsByTagName(\"value\")\n        ).map((valueElement) => {\n            const type = valueElement.getAttribute(\"xsi:type\");\n\n            // Handle xmlItem type specially\n            if (type === \"xmlItem\") {\n                const nestedValues = Array.from(\n                    valueElement.getElementsByTagName(\"value\")\n                ).map((nested) => ({\n                    value: nested.textContent,\n                    type: nested.getAttribute(\"xsi:type\"),\n                }));\n                return nestedValues;\n            }\n\n            return {\n                value: valueElement.textContent,\n                type: type,\n            };\n        });\n\n        // Flatten array if it contains xmlItem values\n        const flatValues = values.flat();\n\n        // If only one value exists, return it directly\n        return flatValues.length === 1 ? flatValues[0] : flatValues;\n    }\n\n    /**\n     * Sets the value of an item\n     * @param {string} itemName - The name of the item\n     * @param {string|number|boolean} value - The value to set\n     * @param {string} [type] - The data type (optional, automatically determined if not provided)\n     * @param {Element} [context] - Optional context (document node)\n     */\n    setItemValue(itemName, value, type = null, context = this.workitemXML) {\n        // If no type is provided, determine it automatically\n        if (!type) {\n            type = this._determineXMLType(value);\n        }\n\n        let itemElement = context.querySelector(`item[name=\"${itemName}\"]`);\n\n        // Create the item if it doesn't exist\n        if (!itemElement) {\n            itemElement = context.createElement(\"item\");\n            itemElement.setAttribute(\"name\", itemName);\n            context.documentElement.appendChild(itemElement);\n        } else {\n            // Otherwise clear its content\n            itemElement.innerHTML = \"\";\n        }\n\n        // Set the value\n        const valueElement = context.createElement(\"value\");\n        valueElement.setAttribute(\"xsi:type\", type);\n\n        // Trim value and remove line breaks if it's a string\n        if (typeof value === \"string\") {\n            value = value.trim();\n        }\n        valueElement.textContent = value;\n\n        itemElement.appendChild(valueElement);\n    }\n\n    /**\n     * Determines the XML Schema type of a value\n     * @param {any} value - The value to check\n     * @returns {string} The determined XML Schema type\n     * @private\n     */\n    _determineXMLType(value) {\n        if (typeof value === \"boolean\") return \"xs:boolean\";\n        if (typeof value === \"number\") {\n            return Number.isInteger(value) ? \"xs:int\" : \"xs:double\";\n        }\n        return \"xs:string\";\n    }\n\n    /**\n     * Extracts all document elements from the XML\n     * @returns {Element[]} Array of document elements\n     */\n    getDocuments() {\n        return Array.from(this.xmlDoc.getElementsByTagName(\"document\"));\n    }\n\n    /**\n     * Generates an XML string from a document\n     * @param {Document} xmlDoc - The XML document to serialize\n     * @returns {string} The generated XML string\n     */\n    toXMLString(xmlDoc) {\n        if (!xmlDoc) {\n            console.error(\"No XML document provided to toXMLString\");\n            return \"\";\n        }\n\n        const serializer = new XMLSerializer();\n        return serializer.serializeToString(xmlDoc);\n    }\n}\n", "// ModelManager.js\nexport class ModelManager {\n    constructor(dataManager) {\n        this.dataManager = dataManager;\n    }\n\n    /**\n     * Fetches the BPMN model data for a specific task\n     * @returns {Promise<Document>} Task definition document\n     */\n    async getTaskDefinition() {\n        try {\n            return await this.dataManager.loadTaskDefinition();\n        } catch (error) {\n            console.error(\"Error fetching task definition:\", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Fetches available events for a specific task\n     * @returns {Promise<Array>} List of available events\n     */\n    async getTaskEvents() {\n        try {\n            await this.dataManager.loadTaskEvents();\n\n            // Get all documents (events) and transform them into event objects\n            return Array.from(\n                this.dataManager.eventsXML.getElementsByTagName(\"document\")\n            )\n                .map((docElement) => ({\n                    eventid: this.dataManager.getItemValue(\n                        \"eventid\",\n                        docElement\n                    )?.value,\n                    name: this.dataManager.getItemValue(\"name\", docElement)\n                        ?.value,\n                    \"workflow.public\":\n                        this.dataManager.getItemValue(\n                            \"workflow.public\",\n                            docElement\n                        )?.value === \"true\",\n                }))\n                .filter((event) => event.name && event[\"workflow.public\"]);\n        } catch (error) {\n            console.error(\"Error fetching task events:\", error);\n            throw error;\n        }\n    }\n\n    /**\n     * Gets the form definition from the current task or workitem\n     * @returns {string|null} The form definition XML or null if not found\n     */\n    getFormDefinition() {\n        return this.dataManager.getFormDefinition();\n    }\n}\n", "// FormManager.js\nexport class FormManager {\n    constructor(dataManager) {\n        this.dataManager = dataManager;\n    }\n\n    /**\n     * Parse XML form definition into a structured format\n     * @param {string} xmlString - The XML form definition string\n     * @returns {Promise<Array>} Form structure array\n     */\n    async parseFormDefinition(xmlString) {\n        const xmlDoc = this.dataManager.parseXMLString(xmlString);\n        const sections = xmlDoc.getElementsByTagName(\"imixs-form-section\");\n        const formStructure = [];\n\n        for (let section of sections) {\n            const sectionData = {\n                label: section.getAttribute(\"label\"),\n                items: [],\n            };\n\n            const items = section.getElementsByTagName(\"item\");\n            for (let item of items) {\n                sectionData.items.push({\n                    name: item.getAttribute(\"name\"),\n                    type: item.getAttribute(\"type\"),\n                    label: item.getAttribute(\"label\"),\n                    span: parseInt(item.getAttribute(\"span\")) || 12,\n                });\n            }\n            formStructure.push(sectionData);\n        }\n        return formStructure;\n    }\n\n    /**\n     * Render form HTML based on form structure and events\n     * @param {Array} formStructure - The form structure array\n     * @param {string} containerId - The container element ID\n     * @param {Array} events - Optional array of workflow events\n     */\n    renderForm(formStructure, containerId, events = []) {\n        const container = document.getElementById(containerId);\n        if (!container) {\n            console.error(\n                `Container element with id '${containerId}' not found`\n            );\n            return;\n        }\n\n        const form = document.createElement(\"form\");\n        form.className = \"imixs-form\";\n\n        // Build and append the header\n        this._buildHeader(form);\n\n        // Render form sections\n        formStructure.forEach((section) => {\n            const sectionDiv = document.createElement(\"div\");\n            sectionDiv.className = \"imixs-form-section\";\n\n            const sectionTitle = document.createElement(\"h3\");\n            sectionTitle.textContent = section.label;\n            sectionDiv.appendChild(sectionTitle);\n\n            const itemsContainer = document.createElement(\"div\");\n            itemsContainer.className = \"imixs-form-items\";\n\n            section.items.forEach((item) => {\n                const itemDiv = document.createElement(\"div\");\n                itemDiv.className = `imixs-form-item span-${item.span}`;\n\n                const label = document.createElement(\"label\");\n                label.textContent = item.label;\n                itemDiv.appendChild(label);\n\n                const input = this._createInputElement(item);\n                const existingValue = this.dataManager.getItemValue(\n                    item.name,\n                    this.dataManager.workitemXML\n                )?.value;\n                if (existingValue) {\n                    input.value = existingValue;\n                }\n                itemDiv.appendChild(input);\n\n                itemsContainer.appendChild(itemDiv);\n            });\n\n            sectionDiv.appendChild(itemsContainer);\n            form.appendChild(sectionDiv);\n        });\n\n        // Build and append action buttons\n        this._buildActionButtons(form, events);\n\n        // Bind submit handler\n        form.addEventListener(\"submit\", (e) => {\n            const submitButton = e.submitter;\n            const eventId =\n                submitButton?.dataset?.eventid ||\n                this.dataManager.config.eventid;\n            this._handleSubmit(e, eventId);\n        });\n\n        container.innerHTML = \"\";\n        container.appendChild(form);\n    }\n\n    /**\n     * Builds a workitem header with status information about the current workitem.\n     *\n     */\n    _buildHeader(form) {\n        let title =\n            this.dataManager.getItemValue(\n                \"$workflowgroup\",\n                this.dataManager.workitemXML\n            )?.value || \"\";\n        const workflowStatus =\n            this.dataManager.getItemValue(\n                \"$workflowstatus\",\n                this.dataManager.workitemXML\n            )?.value || \"\";\n\n        if (workflowStatus != \"\") {\n            title = title + \" - \" + workflowStatus;\n        }\n\n        const workflowSummary =\n            this.dataManager.getItemValue(\n                \"$workflowsummary\",\n                this.dataManager.workitemXML\n            )?.value || \"\";\n\n        // if no title was found take the task name\n        if (title === \"\") {\n            title =\n                this.dataManager.getItemValue(\"name\", this.dataManager.taskXML)\n                    ?.value || \"\";\n        }\n        const groupHeader = document.createElement(\"h2\");\n        groupHeader.textContent = `${title}`;\n        form.appendChild(groupHeader);\n\n        const summaryHeader = document.createElement(\"p\");\n        summaryHeader.textContent = `${workflowSummary}`;\n        form.appendChild(summaryHeader);\n    }\n\n    /**\n     * Builds the action buttons for a workitem based on the BPMN Model information\n     *\n     * @param {*} form\n     * @param {*} events\n     */\n    _buildActionButtons(form, events) {\n        const buttonContainer = document.createElement(\"div\");\n        buttonContainer.className = \"imixs-form-buttons\";\n\n        events.forEach((event) => {\n            if (event && event[\"workflow.public\"] === true && event.name) {\n                const button = document.createElement(\"button\");\n                button.type = \"submit\";\n                button.className = \"imixs-submit-button\";\n                button.textContent = event.name;\n                button.dataset.eventid = event.eventid;\n                buttonContainer.appendChild(button);\n            }\n        });\n\n        if (events.length === 0) {\n            const defaultButton = document.createElement(\"button\");\n            defaultButton.type = \"submit\";\n            defaultButton.className = \"imixs-submit-button\";\n            defaultButton.textContent = \"Submit\";\n            defaultButton.dataset.eventid = this.dataManager.config.eventid;\n            buttonContainer.appendChild(defaultButton);\n        }\n\n        form.appendChild(buttonContainer);\n    }\n\n    /**\n     * Create input element based on type\n     * @param {Object} item - The form item configuration\n     * @returns {HTMLElement} The created input element\n     * @private\n     */\n    _createInputElement(item) {\n        let input;\n        switch (item.type) {\n            case \"html\":\n                input = document.createElement(\"textarea\");\n                break;\n            case \"currency\":\n                input = document.createElement(\"input\");\n                input.type = \"number\";\n                input.step = \"0.01\";\n                break;\n            case \"text\":\n            default:\n                input = document.createElement(\"input\");\n                input.type = \"text\";\n        }\n        input.name = item.name;\n        input.className = \"imixs-input\";\n        return input;\n    }\n\n    /**\n     * Handle form submission\n     * @param {Event} event - The submit event\n     * @param {string} eventId - The workflow event ID\n     * @private\n     */\n    async _handleSubmit(event, eventId) {\n        event.preventDefault();\n        const formData = new FormData(event.target);\n\n        try {\n            // Update existing workitem\n            this.dataManager.setItemValue(\n                \"$modelversion\",\n                this.dataManager.config.modelversion,\n                null,\n                this.dataManager.workitemXML\n            );\n            this.dataManager.setItemValue(\n                \"$taskid\",\n                this.dataManager.config.taskid,\n                null,\n                this.dataManager.workitemXML\n            );\n            this.dataManager.setItemValue(\n                \"$eventid\",\n                eventId,\n                null,\n                this.dataManager.workitemXML\n            );\n\n            // Add form data\n            for (let [name, value] of formData.entries()) {\n                this.dataManager.setItemValue(\n                    name,\n                    value,\n                    null,\n                    this.dataManager.workitemXML\n                );\n            }\n\n            // Handle mock mode\n            if (this.dataManager.config.mockMode) {\n                console.log(\"Form Data:\", Object.fromEntries(formData));\n                console.log(\"Event ID:\", eventId);\n                const xmlString = this.dataManager.toXMLString(\n                    this.dataManager.workitemXML\n                );\n                console.log(\"XML Document:\", xmlString);\n\n                this._triggerEvent(\"formSubmitSuccess\", {\n                    formData: Object.fromEntries(formData),\n                    xmlDocument: xmlString,\n                    eventId: eventId,\n                });\n                return;\n            }\n\n            // Send to server\n            const url = this.dataManager.getApiUrl(\n                this.dataManager.config.workflowEndpoint\n            );\n            const response = await this.dataManager.fetchData(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/xml\",\n                },\n                body: this.dataManager.toXMLString(\n                    this.dataManager.workitemXML\n                ),\n            });\n\n            // Parse the response to get the uniqueid\n            const result = await response.text();\n            const resultXML = this.dataManager.parseXMLString(result);\n\n            // Get uniqueid for redirect\n            const uniqueId = this.dataManager.getItemValue(\n                \"$uniqueid\",\n                resultXML\n            )?.value;\n            if (uniqueId) {\n                // Construct new URL with workitem ID\n                const url = new URL(window.location.href);\n                url.searchParams.set(\"workitem\", uniqueId);\n\n                // Remove unnecessary parameters\n                url.searchParams.delete(\"eventid\");\n                url.searchParams.delete(\"modelversion\");\n                url.searchParams.delete(\"taskid\");\n\n                // Trigger success event before redirect\n                this._triggerEvent(\"formSubmitSuccess\", {\n                    result,\n                    uniqueId,\n                    redirectUrl: url.toString(),\n                });\n\n                // Perform redirect\n                window.location.href = url.toString();\n            } else {\n                console.error(\"No uniqueid found in response\");\n                this._triggerEvent(\"formSubmitError\", {\n                    error: new Error(\"No uniqueid found in response\"),\n                });\n            }\n        } catch (error) {\n            console.error(\"Submit error:\", error);\n            this._triggerEvent(\"formSubmitError\", { error });\n        }\n    }\n\n    /**\n     * Trigger a custom event\n     * @param {string} name - Event name\n     * @param {Object} detail - Event detail object\n     * @private\n     */\n    _triggerEvent(name, detail) {\n        const event = new CustomEvent(name, { detail });\n        document.dispatchEvent(event);\n    }\n}\n", "// ErrorManager.js\nexport class ErrorManager {\n    constructor(config = {}) {\n        this.containerId = config.containerId || \"error-container\";\n        this._ensureContainer();\n    }\n\n    /**\n     * Creates an error container if it doesn't exist\n     * @private\n     */\n    _ensureContainer() {\n        if (!document.getElementById(this.containerId)) {\n            const container = document.createElement(\"div\");\n            container.id = this.containerId;\n            container.className = \"error-container\";\n            // Insert at the beginning of the body\n            document.body.insertBefore(container, document.body.firstChild);\n        }\n    }\n\n    /**\n     * Shows an error message\n     * @param {string} message - The error message to display\n     * @param {object} options - Additional options (type, timeout)\n     */\n    showError(message, options = {}) {\n        const container = document.getElementById(this.containerId);\n        const errorBox = document.createElement(\"div\");\n\n        errorBox.className = `error-box ${options.type || \"error\"}`;\n\n        // Create header with title and close button\n        const header = document.createElement(\"div\");\n        header.className = \"error-header\";\n\n        const title = document.createElement(\"span\");\n        const titleText =\n            options.type === \"warning\"\n                ? \"Warning\"\n                : options.type === \"info\"\n                ? \"Info\"\n                : \"Error\";\n        title.textContent = titleText;\n        header.appendChild(title);\n\n        const closeButton = document.createElement(\"button\");\n        closeButton.innerHTML = \"&times;\";\n        closeButton.onclick = () => errorBox.remove();\n        header.appendChild(closeButton);\n\n        errorBox.appendChild(header);\n\n        // Add message\n        const messageDiv = document.createElement(\"div\");\n        messageDiv.className = \"error-message\";\n        messageDiv.textContent = message;\n        errorBox.appendChild(messageDiv);\n\n        container.appendChild(errorBox);\n\n        // Optional auto-hide\n        if (options.timeout) {\n            setTimeout(() => {\n                if (errorBox.parentNode) {\n                    errorBox.remove();\n                }\n            }, options.timeout);\n        }\n\n        return errorBox;\n    }\n\n    /**\n     * Shows a warning message\n     * @param {string} message - The warning message to display\n     * @param {object} options - Additional options\n     */\n    showWarning(message, options = {}) {\n        return this.showError(message, { ...options, type: \"warning\" });\n    }\n\n    /**\n     * Shows an info message\n     * @param {string} message - The info message to display\n     * @param {object} options - Additional options\n     */\n    showInfo(message, options = {}) {\n        return this.showError(message, { ...options, type: \"info\" });\n    }\n\n    /**\n     * Clears all error messages\n     */\n    clearAll() {\n        const container = document.getElementById(this.containerId);\n        container.innerHTML = \"\";\n    }\n\n    /**\n     * Handles an Error object and displays appropriate message\n     * @param {Error} error - The error object to handle\n     */\n    handleError(error) {\n        let message;\n        if (\n            error.name === \"NetworkError\" ||\n            error.message.includes(\"Failed to fetch\")\n        ) {\n            message =\n                \"Network error: Unable to connect to the server. Please check your connection.\";\n        } else if (error.message.includes(\"No form definition found\")) {\n            message =\n                \"No form definition found for the specified task. Please check model version and task ID.\";\n        } else {\n            message = `An error occurred: ${error.message}`;\n        }\n\n        this.showError(message);\n    }\n}\n"],
  "mappings": "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",
  "names": ["ImixsFormController_exports", "__export", "ImixsFormController", "DataManager", "config", "urlParams", "url", "xmlText", "error", "uniqueId", "documentElement", "doc", "newDocumentElement", "attr", "formDefinition", "dataObjects", "savedForm", "options", "headers", "response", "path", "xmlString", "itemName", "context", "itemElement", "flatValues", "valueElement", "type", "nested", "value", "xmlDoc", "ModelManager", "dataManager", "error", "docElement", "event", "FormManager", "dataManager", "xmlString", "sections", "formStructure", "section", "sectionData", "items", "item", "containerId", "events", "container", "form", "sectionDiv", "sectionTitle", "itemsContainer", "itemDiv", "label", "input", "existingValue", "e", "eventId", "title", "workflowStatus", "workflowSummary", "groupHeader", "summaryHeader", "buttonContainer", "event", "button", "defaultButton", "formData", "name", "value", "url", "result", "resultXML", "uniqueId", "error", "detail", "ErrorManager", "config", "container", "message", "options", "errorBox", "header", "title", "titleText", "closeButton", "messageDiv", "error", "ImixsFormController", "containerId", "config", "ErrorManager", "DataManager", "ModelManager", "FormManager", "error", "formDefinition", "events", "formStructure"]
}
