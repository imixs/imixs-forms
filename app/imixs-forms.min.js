var ImixsForms=(()=>{var p=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var y=(l,e)=>{for(var t in e)p(l,t,{get:e[t],enumerable:!0})},L=(l,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of b(e))!x.call(l,r)&&r!==t&&p(l,r,{get:()=>e[r],enumerable:!(n=v(e,r))||n.enumerable});return l};var X=l=>L(p({},"__esModule",{value:!0}),l);var I={};y(I,{ImixsFormController:()=>w});var u=class{constructor(e={}){let t=new URLSearchParams(window.location.search);this.config={baseUrl:e.baseUrl||"/api",credentials:e.credentials||{},workflowEndpoint:e.workflowEndpoint||"workflow/workitem",mockMode:e.mockMode||!1},this.workitemId=t.get("workitem"),this.workitemId||(this.config.modelversion=t.get("modelversion")||e.modelversion||"1.0.0",this.config.taskid=t.get("taskid")||e.taskid||"1000",this.config.eventid=t.get("eventid")||e.eventid||"10"),this.namespaces={xsi:"http://www.w3.org/2001/XMLSchema-instance",xs:"http://www.w3.org/2001/XMLSchema"},this.taskXML=null,this.eventsXML=null,this.workitemXML=null}async initialize(){this.workitemId?(await this.loadWorkitem(this.workitemId),this.config.modelversion=this.getItemValue("$modelversion",this.workitemXML)?.value,this.config.taskid=this.getItemValue("$taskid",this.workitemXML)?.value):this.workitemXML=this.createDocument(),await this.loadTaskDefinition(),await this.loadTaskEvents()}async loadTaskDefinition(){try{let e=this.getApiUrl(`model/${this.config.modelversion}/tasks/${this.config.taskid}?format=xml&items=name,dataobjects,workflow.abstract,documentation`),n=await(await this.fetchData(e)).text();return this.taskXML=this.parseXMLString(n),this.taskXML}catch(e){throw console.error("Error loading task definition:",e),e}}async loadTaskEvents(){try{let e=this.getApiUrl(`model/${this.config.modelversion}/tasks/${this.config.taskid}/events?format=xml&items=eventid,workflow.public,name`),n=await(await this.fetchData(e)).text();return this.eventsXML=this.parseXMLString(n),this.eventsXML}catch(e){throw console.error("Error loading task events:",e),e}}async loadWorkitem(e){try{let t=this.getApiUrl(`workflow/workitem/${e}`),r=await(await this.fetchData(t)).text(),i=this.parseXMLString(r).getElementsByTagName("document")[0],m=this.createDocument(),s=m.documentElement;for(let o of i.attributes)s.setAttribute(o.name,o.value);return s.innerHTML=i.innerHTML,this.workitemXML=m,m}catch(t){throw console.error("Error loading workitem:",t),t}}getFormDefinition(){let e=null;if(this.taskXML){let t=this.getItemValue("dataobjects",this.taskXML);t&&t[0]?.value==="Form"&&t[1]?.value&&(e=t[1].value,console.debug("Found form definition in task"),this.workitemXML&&(this.setItemValue("txtworkfloweditorcustomform",e,null,this.workitemXML),console.debug("Saved form definition to workitem")))}if(!e&&this.workitemXML){let t=this.getItemValue("txtworkfloweditorcustomform",this.workitemXML);t?.value&&(e=t.value,console.debug("Found form definition in workitem"))}return e?e.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&amp;/g,"&"):null}async fetchData(e,t={}){let n={Accept:"application/xml",...t.headers||{}};this.config.credentials.username&&(n.Authorization="Basic "+btoa(`${this.config.credentials.username}:${this.config.credentials.password}`));let r=await fetch(e,{...t,headers:n});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);return r}getApiUrl(e){return`${this.config.baseUrl}/${e}`}parseXMLString(e){return new DOMParser().parseFromString(e,"text/xml")}createDocument(){let e=`<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<document xmlns:xsi="`+this.namespaces.xsi+'" xmlns:xs="'+this.namespaces.xs+'"/>';return new DOMParser().parseFromString(e,"text/xml")}getItemValue(e,t=this.xmlDoc){let n=t.querySelector(`item[name="${e}"]`);if(!n)return null;let a=Array.from(n.getElementsByTagName("value")).map(i=>{let m=i.getAttribute("xsi:type");return m==="xmlItem"?Array.from(i.getElementsByTagName("value")).map(o=>({value:o.textContent,type:o.getAttribute("xsi:type")})):{value:i.textContent,type:m}}).flat();return a.length===1?a[0]:a}setItemValue(e,t,n=null,r=this.workitemXML){n||(n=this._determineXMLType(t));let a=r.querySelector(`item[name="${e}"]`);a?a.innerHTML="":(a=r.createElement("item"),a.setAttribute("name",e),r.documentElement.appendChild(a));let i=r.createElement("value");i.setAttribute("xsi:type",n),typeof t=="string"&&(t=t.trim()),i.textContent=t,a.appendChild(i)}_determineXMLType(e){return typeof e=="boolean"?"xs:boolean":typeof e=="number"?Number.isInteger(e)?"xs:int":"xs:double":"xs:string"}getDocuments(){return Array.from(this.xmlDoc.getElementsByTagName("document"))}toXMLString(e){return e?new XMLSerializer().serializeToString(e):(console.error("No XML document provided to toXMLString"),"")}};var h=class{constructor(e){this.dataManager=e}async getTaskDefinition(){try{return await this.dataManager.loadTaskDefinition()}catch(e){throw console.error("Error fetching task definition:",e),e}}async getTaskEvents(){try{return await this.dataManager.loadTaskEvents(),Array.from(this.dataManager.eventsXML.getElementsByTagName("document")).map(e=>({eventid:this.dataManager.getItemValue("eventid",e)?.value,name:this.dataManager.getItemValue("name",e)?.value,"workflow.public":this.dataManager.getItemValue("workflow.public",e)?.value==="true"})).filter(e=>e.name&&e["workflow.public"])}catch(e){throw console.error("Error fetching task events:",e),e}}getFormDefinition(){return this.dataManager.getFormDefinition()}};var g=class{constructor(e){this.dataManager=e}async parseFormDefinition(e){let n=this.dataManager.parseXMLString(e).getElementsByTagName("imixs-form-section"),r=[];for(let a of n){let i={label:a.getAttribute("label"),items:[]},m=a.getElementsByTagName("item");for(let s of m)i.items.push({name:s.getAttribute("name"),type:s.getAttribute("type"),label:s.getAttribute("label"),span:parseInt(s.getAttribute("span"))||12});r.push(i)}return r}renderForm(e,t,n=[]){let r=document.getElementById(t);if(!r){console.error(`Container element with id '${t}' not found`);return}let a=document.createElement("form");a.className="imixs-form",this._buildHeader(a),e.forEach(i=>{let m=document.createElement("div");m.className="imixs-form-section";let s=document.createElement("h3");s.textContent=i.label,m.appendChild(s);let o=document.createElement("div");o.className="imixs-form-items",i.items.forEach(c=>{let d=document.createElement("div");d.className=`imixs-form-item span-${c.span}`;let M=document.createElement("label");M.textContent=c.label,d.appendChild(M);let k=this._createInputElement(c),E=this.dataManager.getItemValue(c.name,this.dataManager.workitemXML)?.value;E&&(k.value=E),d.appendChild(k),o.appendChild(d)}),m.appendChild(o),a.appendChild(m)}),this._buildActionButtons(a,n),a.addEventListener("submit",i=>{let s=i.submitter?.dataset?.eventid||this.dataManager.config.eventid;this._handleSubmit(i,s)}),r.innerHTML="",r.appendChild(a)}_buildHeader(e){let t=this.dataManager.getItemValue("$workflowgroup",this.dataManager.workitemXML)?.value||"",n=this.dataManager.getItemValue("$workflowstatus",this.dataManager.workitemXML)?.value||"";n!=""&&(t=t+" - "+n);let r=this.dataManager.getItemValue("$workflowsummary",this.dataManager.workitemXML)?.value||"";t===""&&(t=this.dataManager.getItemValue("name",this.dataManager.taskXML)?.value||"");let a=document.createElement("h2");a.textContent=`${t}`,e.appendChild(a);let i=document.createElement("p");i.textContent=`${r}`,e.appendChild(i)}_buildActionButtons(e,t){let n=document.createElement("div");n.className="imixs-form-buttons",t.forEach(r=>{if(r&&r["workflow.public"]===!0&&r.name){let a=document.createElement("button");a.type="submit",a.className="imixs-submit-button",a.textContent=r.name,a.dataset.eventid=r.eventid,n.appendChild(a)}}),t.length===0&&console.log("No Action events found"),e.appendChild(n)}_createInputElement(e){let t;switch(e.type){case"html":t=document.createElement("textarea");break;case"currency":t=document.createElement("input"),t.type="number",t.step="0.01";break;case"text":default:t=document.createElement("input"),t.type="text"}return t.name=e.name,t.className="imixs-input",t}async _handleSubmit(e,t){e.preventDefault();let n=new FormData(e.target);try{this.dataManager.setItemValue("$modelversion",this.dataManager.config.modelversion,null,this.dataManager.workitemXML),this.dataManager.setItemValue("$taskid",this.dataManager.config.taskid,null,this.dataManager.workitemXML),this.dataManager.setItemValue("$eventid",t,null,this.dataManager.workitemXML);for(let[o,c]of n.entries())this.dataManager.setItemValue(o,c,null,this.dataManager.workitemXML);if(this.dataManager.config.mockMode){console.log("Form Data:",Object.fromEntries(n)),console.log("Event ID:",t);let o=this.dataManager.toXMLString(this.dataManager.workitemXML);console.log("XML Document:",o),this._triggerEvent("formSubmitSuccess",{formData:Object.fromEntries(n),xmlDocument:o,eventId:t});return}let r=this.dataManager.getApiUrl(this.dataManager.config.workflowEndpoint),i=await(await this.dataManager.fetchData(r,{method:"POST",headers:{"Content-Type":"application/xml"},body:this.dataManager.toXMLString(this.dataManager.workitemXML)})).text(),m=this.dataManager.parseXMLString(i),s=this.dataManager.getItemValue("$uniqueid",m)?.value;if(s){let o=new URL(window.location.href);o.searchParams.set("workitem",s),o.searchParams.delete("eventid"),o.searchParams.delete("modelversion"),o.searchParams.delete("taskid"),this._triggerEvent("formSubmitSuccess",{result:i,uniqueId:s,redirectUrl:o.toString()}),window.location.href=o.toString()}else console.error("No uniqueid found in response"),this._triggerEvent("formSubmitError",{error:new Error("No uniqueid found in response")})}catch(r){console.error("Submit error:",r),this._triggerEvent("formSubmitError",{error:r})}}_triggerEvent(e,t){let n=new CustomEvent(e,{detail:t});document.dispatchEvent(n)}};var f=class{constructor(e={}){this.containerId=e.containerId||"error-container",this._ensureContainer()}_ensureContainer(){if(!document.getElementById(this.containerId)){let e=document.createElement("div");e.id=this.containerId,e.className="error-container",document.body.insertBefore(e,document.body.firstChild)}}showError(e,t={}){let n=document.getElementById(this.containerId),r=document.createElement("div");r.className=`error-box ${t.type||"error"}`;let a=document.createElement("div");a.className="error-header";let i=document.createElement("span"),m=t.type==="warning"?"Warning":t.type==="info"?"Info":"Error";i.textContent=m,a.appendChild(i);let s=document.createElement("button");s.innerHTML="&times;",s.onclick=()=>r.remove(),a.appendChild(s),r.appendChild(a);let o=document.createElement("div");return o.className="error-message",o.textContent=e,r.appendChild(o),n.appendChild(r),t.timeout&&setTimeout(()=>{r.parentNode&&r.remove()},t.timeout),r}showWarning(e,t={}){return this.showError(e,{...t,type:"warning"})}showInfo(e,t={}){return this.showError(e,{...t,type:"info"})}clearAll(){let e=document.getElementById(this.containerId);e.innerHTML=""}handleError(e){let t;e.name==="NetworkError"||e.message.includes("Failed to fetch")?t="Network error: Unable to connect to the server. Please check your connection.":e.message.includes("No form definition found")?t="No form definition found for the specified task. Please check model version and task ID.":t=`An error occurred: ${e.message}`,this.showError(t)}};var w=class{constructor(e,t={}){this.containerId=e,document.addEventListener("DOMContentLoaded",()=>this.init(t))}async init(e){try{this.errorManager=new f,this.dataManager=new u(e),this.modelManager=new h(this.dataManager),this.formManager=new g(this.dataManager),this._setupEventHandlers(),await this._initializeForm()}catch(t){this.errorManager.handleError(t)}}_setupEventHandlers(){document.addEventListener("formSubmitSuccess",e=>{console.log("Form data:",e.detail),this.errorManager.showInfo("Form submitted successfully!",{timeout:3e3})}),document.addEventListener("formSubmitError",e=>{this.errorManager.handleError(e.detail.error)})}async _initializeForm(){await this.dataManager.initialize();let e=this.modelManager.getFormDefinition();if(!e)throw new Error("No form definition found in task or workitem data");let t=await this.modelManager.getTaskEvents(),n=await this.formManager.parseFormDefinition(e);this.formManager.renderForm(n,this.containerId,t)}};return X(I);})();
//# sourceMappingURL=data:application/json;base64,
